# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'javacc-5.0.ebuild' from Gentoo, which is:
#     Copyright 1999-2010 Gentoo Foundation

# ....................{ EXLIB                              }....................
# See the "java-net" exlib for details.
myexparam pv_id=

require antefix java-net [ \
    pn_id=17 pv_id=$(exparam pv_id) pnv="${PNV}src" suffix="tar.gz" ]
export_exlib_phases src_prepare src_install

# ....................{ EXHERES                            }....................
BUGS_TO="leycec@gmail.com"

SUMMARY="Java sourcecode generator for parsing formal grammars"
DESCRIPTION="
JavaCC, the Java Compiler Compiler, is an open-source parser generator for the
Java programming language. It's similar to Yacc in that it generates a parser
for a formal grammar provided in EBNF notation, except the output is Java source
code. Unlike Yacc, however, JavaCC generates top-down parsers. This limits it to
the LL(k) class of grammars and, in particular, prevents use of left recursion.
"

UPSTREAM_DOCUMENTATION="${HOMEPAGE}/doc/docindex.html [[ lang = en ]]"

LICENCES="BSD-3"
DEPENDENCIES="
    test:
        dev-java/junit:4
"

WORK="${WORKBASE}/${PN}"

# JavaCC actually bundles a compiled version of itself as a jar file so as to
# bootstrap compile a new JavaCC parser given this bundle. This is odd, but
# there's not much we can do.
JAVA_CLEAN_JAR_FILES_PARAMS=( -not -name 'javacc.jar' )
JAVA_SRC_LIBRARY_DIR="lib/junit"
JAVA_SRC_TEST_JARS=( "junit:4" )
JAVA_SRC_INSTALL_JARS=( "bin/lib/${PN}.jar" )

# Do not run the "compile" task in the src_compile phase. Why? Because the
# "test" task, if run, compiles all source using different compilation flags
# than are used during the conventional "compile" task. Instead, do the
# following:
#
# * If running the "test" task, run the "clean" task immediately after. This
#   ensures that the next task recompiles all source using conventional flags.
# * Run the "jar" task. This implicitly runs the "compile" task, as well.
#
# Note that, though the "compile" task compiles "*Test.java" files, the "jar"
# task does not actually jar them. (Good enough for us.)
#
# Note also that this task complains several times about "Token.java" being a
# deprecated file. Do not remove these files, however! Compilation dies under
# non-deprecated versions of this file. Hurk, spu-urk.
ANT_SRC_TEST_PARAMS=( test clean )
ANT_SRC_INSTALL_PARAMS=( jar )

# ....................{ PHASES                             }....................
javacc_src_prepare() {
    antefix_src_prepare

    # JavaCC's several "build.xml" files actually hardcode a JUnit version
    # dependency. Cull, but note this is probably unsurprising giving the
    # project's... dormancy.
    local broken_build_xml
    for   broken_build_xml in \
        "${ANT_BUILD_XML}" "src/org/javacc/parser/build.xml"; do
        edo sed -e 's~lib/junit[0-9.]*/~lib/junit/~' -i "${broken_build_xml}"
    done
}

javacc_src_install() {
    antefix_src_install

    # Set absolute paths in a reasonably generic way. (See below.)
    local javacc_jar_file=$(which_installed_jar_file_for_this_exheres)
    local javacc_bin_dir=$( which_installed_jar_dir_for_this_exheres)/"bin"

    # JavaCC provides several convenience shell scripts for running various
    # Java class files in its installed jar file as command-line executables.
    # Change the path to that jar file in these scripts to the Exherbo-specific
    # absolute path...to that jar file!
    #
    # Don't do this in "javacc_src_prepare" as "javacc.jar" will not have been
    # installed at that point.
    local javacc_shell_script
    for   javacc_shell_script in \
        "bin/javacc" "bin/jjdoc" "bin/jjrun" "bin/jjtree"; do
        edo sed -e "s~^JAR=.*$~JAR=\"${javacc_jar_file}\"~" \
            -i "${javacc_shell_script}"
        dobin  "${javacc_shell_script}"
    done

    # Exherbo prefers an installation tree resembling:
    #
    #     /usr/share/javacc/javacc.jar
    #     /usr/bin/javacc
    #     /usr/bin/jjdoc
    #     /usr/bin/jjrun
    #     /usr/bin/jjtree
    #
    # However, JavaCC and other exheres requiring JavaCC expect an installation
    # tree resembling:
    #
    #     /usr/share/javacc/bin/lib/javacc.jar
    #     /usr/share/javacc/bin/javacc
    #     /usr/share/javacc/bin/jjdoc
    #     /usr/share/javacc/bin/jjrun
    #     /usr/share/javacc/bin/jjtree
    #
    # Provide both by symlinking the former to the latter.
    dodir                      "${javacc_bin_dir}/lib/"
    dosym "${javacc_jar_file}" "${javacc_bin_dir}/lib/"
    local javacc_shell_script
    for   javacc_shell_script in "javacc" "jjdoc" "jjrun" "jjtree"; do
        dosym "/usr/bin/${javacc_shell_script}" "${javacc_bin_dir}/"
    done
}

