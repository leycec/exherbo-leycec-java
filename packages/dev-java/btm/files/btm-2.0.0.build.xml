<project default="build" name="btm">

    <property name="jar.version" value="2.0.0"/>

    <property environment="env"/>
    <property name="dir.src" value="src"/>
    <property name="dir.src.test" value="test"/>
    <property name="dir.doc.src" value="doc"/>
    <property name="dir.dist" value="dist"/>
    <property name="dir.doc.dest" value="${dir.dist}/doc"/>
    <property name="dir.doc.api" value="${dir.dist}/doc/api"/>
    <property name="dir.classes" value="${dir.dist}/classes"/>
    <property name="dir.classes.test" value="${dir.dist}/classes-test"/>
    <property name="dir.lib" value="lib"/>
    <property name="dir.lib.tools" value="tools-lib"/>
    <property name="dir.lib.test" value="test-lib"/>
    <property name="dir.test.report" value="test-reports"/>
    <property name="dir.releasenotes" value="release-notes"/>
    <property name="jar.file" value="${dir.dist}/btm-${jar.version}.jar"/>
    <property name="jar.src.file" value="${dir.dist}/btm-${jar.version}-sources.jar"/>
    <property name="jar.doc.file" value="${dir.dist}/btm-${jar.version}-javadoc.jar"/>
    <property name="zip.file" value="btm-dist-${jar.version}.zip"/>
    <property name="pom.file" value="pom.xml.tpl"/>
    <property name="dir.m2.repo" value="${env.HOME}/.m2/repository"/>


    <path id="javac.classpath">
        <fileset dir="${dir.lib}" includes="*.jar"/>
    </path>

    <path id="tools.classpath">
        <fileset dir="${dir.lib.tools}" includes="*.jar"/>
    </path>

    <path id="app.classpath">
        <pathelement location="${dir.classes}"/>
        <path refid="javac.classpath"/>
    </path>

    <path id="test.classpath">
        <pathelement location="${dir.classes.test}"/>
        <pathelement location="${dir.classes}"/>
        <fileset dir="${dir.lib.test}" includes="*.jar"/>
        <path refid="javac.classpath"/>
    </path>

    <import file="build-codehaus.xml"/>

    <target name="all" depends="clean,build,test,doc,dist" description="Run clean,build,test,doc,dist"/>

    <target name="dist" depends="build,doc" description="Generate distribution ZIP file">
        <property name="destination" value="${dir.dist}/btm-dist-${jar.version}"/>

        <copy file="${jar.file}" todir="${destination}"/>
        <copy file="license.txt" todir="${destination}"/>
        <copy file="${dir.releasenotes}/release-notes-${jar.version}.txt" tofile="${destination}/release-notes.txt"/>
        <copy todir="${destination}">
            <fileset dir="${basedir}">
                <include name="lib/**/*"/>
                <exclude name="lib/**/.svn"/>
                <exclude name="lib/**/log4j-*.jar"/>
                <exclude name="lib/**/slf4j-log4j12-*.jar"/>
            </fileset>
        </copy>
        <copy todir="${destination}">
            <fileset dir="${basedir}">
                <include name="src/**/*"/>
                <exclude name="src/**/.svn"/>
            </fileset>
        </copy>
        <copy todir="${destination}">
            <fileset dir="${basedir}">
                <include name="test/**/*"/>
                <exclude name="test/**/.svn"/>
            </fileset>
        </copy>
        <copy todir="${destination}">
            <fileset dir="${dir.dist}">
                <include name="doc/**/*"/>
            </fileset>
        </copy>
        <copy todir="${destination}">
            <fileset dir="${basedir}">
                <include name="integration/**/*"/>
                <exclude name="integration/**/.svn"/>
            </fileset>
        </copy>

        <delete file="${zip.file}"/>
        <zip basedir="${dir.dist}" file="${zip.file}">
            <include name="btm-dist-${jar.version}/**/*"/>
        </zip>
    </target>

    <target name="build" description="Compile source files and pack them in a JAR file">
        <mkdir dir="${dir.classes}"/>
        <javac srcdir="${dir.src}" destdir="${dir.classes}" source="1.4" target="1.4" fork="true" debug="true" classpathref="javac.classpath"/>

        <delete file="${jar.file}" failonerror="true"/>
        <jar basedir="${dir.classes}" file="${jar.file}">
            <manifest>
                <attribute name="Implementation-Version" value="${jar.version}"/>
            </manifest>
            <include name="**/*"/>
        </jar>

        <delete file="${jar.src.file}" failonerror="true"/>
        <jar basedir="${dir.src}" file="${jar.src.file}">
            <include name="**/*"/>
            <exclude name="**/.svn"/>
        </jar>
    </target>

    <target name="test" depends="build" description="Compile JUnit tests and run them">
        <mkdir dir="${dir.classes.test}"/>
        <javac srcdir="${dir.src.test}" destdir="${dir.classes.test}" fork="true" debug="true" classpathref="test.classpath"/>
        <copy todir="${dir.classes.test}">
            <fileset dir="${dir.src.test}">
                <include name="**/*"/>
                <exclude name="**/*.java"/>
                <exclude name="**/.svn"/>
            </fileset>
        </copy>

        <mkdir dir="${dir.test.report}"/>
        <mkdir dir="${dir.test.report}/xml"/>
        <mkdir dir="${dir.test.report}/html"/>
        <junit printsummary="yes" failureproperty="failure.junit" errorproperty="error.junit">
            <classpath>
                <path refid="test.classpath"/>
            </classpath>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${dir.test.report}/xml">
                <fileset dir="${dir.src.test}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport>
            <fileset dir="${dir.test.report}/xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${dir.test.report}/html"/>
        </junitreport>

        <fail if="failure.junit" message="some test(s) failed"/>
        <fail if="error.junit" message="some test(s) failed"/>
    </target>

    <target name="clean" description="Delete all generated artifacts">
        <delete dir="${dir.test.report}" failonerror="true" includeemptydirs="true"/>
        <delete dir="${dir.dist}" failonerror="true" includeemptydirs="true"/>
    </target>

    <target name="doc" description="Copy static documentation and generate javadoc">
        <copy todir="${dir.doc.dest}">
            <fileset dir="${dir.doc.src}" includes="**/*"/>
        </copy>
        <javadoc destdir="${dir.doc.api}" overview="${dir.src}/overview.html" classpathref="javac.classpath">
            <packageset dir="${dir.src}" defaultexcludes="yes">
                <include name="*/**"/>
            </packageset>
        </javadoc>
        <jar basedir="${dir.doc.api}" file="${jar.doc.file}">
            <include name="**/*"/>
            <exclude name="**/.svn"/>
        </jar>
    </target>

    <target name="m2-install" description="Install artifact and POM in local Maven2 repository.">
        <property name="m2.location" value="${dir.m2.repo}/org/codehaus/btm/btm/${jar.version}"/>
        <mkdir dir="${m2.location}"/>
        <copy file="${pom.file}" tofile="${m2.location}/btm-${jar.version}.pom" />
        <replace file="${m2.location}/btm-${jar.version}.pom" token="@version@" value="${jar.version}"/>
        <checksum file="${m2.location}/btm-${jar.version}.pom" algorithm="MD5" fileext=".md5"/>
        <checksum file="${m2.location}/btm-${jar.version}.pom" algorithm="SHA" fileext=".sha1"/>

        <copy file="${jar.file}" todir="${m2.location}"/>
        <checksum file="${m2.location}/btm-${jar.version}.jar" algorithm="MD5" fileext=".md5"/>
        <checksum file="${m2.location}/btm-${jar.version}.jar" algorithm="SHA" fileext=".sha1"/>

        <copy file="${jar.src.file}" todir="${m2.location}"/>
        <checksum file="${m2.location}/btm-${jar.version}-sources.jar" algorithm="MD5" fileext=".md5"/>
        <checksum file="${m2.location}/btm-${jar.version}-sources.jar" algorithm="SHA" fileext=".sha1"/>

        <copy file="${jar.doc.file}" todir="${m2.location}"/>
        <checksum file="${m2.location}/btm-${jar.version}-javadoc.jar" algorithm="MD5" fileext=".md5"/>
        <checksum file="${m2.location}/btm-${jar.version}-javadoc.jar" algorithm="SHA" fileext=".sha1"/>
    </target>

</project>
