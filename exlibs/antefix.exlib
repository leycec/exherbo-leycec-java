# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
#
# --------------------( SYNOPSIS                           )--------------------
# This exlib improves "ant.exlib" with handling for command-line properties,
# external dependencies, and jar and javadoc installation.
#
# This exlib is currently backwards compatible with "ant.exlib".
#
# --------------------( ETYMOLOGY                          )--------------------
# Technically, an antefix is "an ornament of the cymatium of a classic cornice,
# sometimes pierced for the escape of water." In reality, I'm not sure I know
# what a cymatium is. Or a cornice.

# ....................{ EXHERES                            }....................
# Ant version required by the calling exheres. Defaults to None, in which case 
# we add a versionless Ant dependency. (This is usually fine.)
myexparam ant_version_required=

# If true, recursively delete all JAR and class files respectively from
# "${WORK}" immediately after extracting source archives. Many Java archives
# pre-bundle such files to eliminate transitive dependencies. (This is bad.)
#
# Defaults to true.
myexparam -b clean_jar_files=true
myexparam -b clean_class_files=true

# All Ant exheres are, by assumption, Java exheres. It is therefore crucial that
# this exlib explicitly require the "java" exlib. Subtle issues could arise were
# this exlib not to require that exlib. In particular, note the following two
# require statements are not equal:
#
#     # This overwrites all "antefix" exlib phases with "javafix" exlib phases,
#     # which is *never* what you want.
#     require antefix javafix
#
#     # This overwrites all "javafix" exlib phases with "antefix" exlib phases,
#     # which is always what you want.
#     require javafix antefix
require javafix [\
    clean_jar_files=$(  exparam clean_jar_files)\
    clean_class_files=$(exparam clean_class_files) ]
export_exlib_phases pkg_setup\
    src_unpack src_prepare src_configure src_compile src_test src_install

# If true, programmatically create a new "${WORK}/build.xml" file for this
# exheres. Enable this with exheres providing no "build.xml", but for which the
# skeleton "build.xml" created by this exlib is sufficient to build the exheres.
# Such exheres must meet the following constraints:
# 
# * Their project installs only one JAR file, usually having the same name as
#   their exheres. For the moment, installing multiple JAR files is beyond the
#   scope of this skeleton "build.xml" file.
#
# Exheres enabling this boolean should also consider setting one or several
# other global variables as documented in the
# antefix_enable_build_xml_creation() function and as used in the
# antefix_create_build_xml() function. These variables notify the latter
# function of paths and files required by the skeleton "build.xml" file (e.g.,
# the path under "${WORK}" having Java source code for this exheres). To
# describe the most important of these variables:
#
# * "${ANT_SRC_COMPILE_SOURCE_DIR}", the Java sources directory. It defaults to
#   "${WORK}/src". If the source tarball for this exheres unpacks source files
#   to a different directory, the exheres must set this variable to that
#   directory. Note, however, that if the top-level "${WORK}" == "${WORKBASE}"
#   (i.e., the source tarball unpacks into the current directory), this module
#   is intelligent enough to automatically move all unpacked directories into
#   "${WORK}/src".
#
# Note that most modern Java projects already provide Ant, Maven, or Ivy files.
# Thus this boolean should be used *sparingly*, if at all.
#
# Defaults to false.
myexparam -b create_build_xml=false

# ....................{ SETTINGS                           }....................
# Absolute or relative path under ${WORK} to the "build.xml" for this exheres.
ANT_BUILD_XML="build.xml"

# Ant parameters to be passed to all command-line invocations of Ant. There is
# no default due to lack of enforced conformity in "build.xml" files. Example:
#     ANT_PARAMS=( -Dproject.classpath=/usr/share/zebrapig/ )
ANT_PARAMS=( )

# Ant tasks to be run against ${ANT_BUILD_XML} during the "src_unpack" phase.
# This is empty by default, implying no Ant tasks will be run for unpacking.
# Example:
#     ANT_SRC_UNPACK_PARAMS=( init )
#
# This and all other Ant task arrays below are empty by default, as Ant is by
# design unable to force task names to adhere to ISO standards. In other words,
# any "build.xml" file can name its tasks anything and they do. As there's no
# sensible way of predicting this, or programmatically safe way of extracting
# this from "build.xml" files, Ant exheres must manually list tasks.
#
# Note, few "build.xml" files provide unpack tasks. Avoid assigning tasks to
# this array unless you pretend to know what you're doing.
ANT_SRC_UNPACK_PARAMS=( )

# Ant tasks to be run against ${ANT_BUILD_XML} during the "src_prepare" phase.
# This is empty by default, implying no Ant tasks will be run for preparation.
# Example:
#     ANT_SRC_PREPARE_PARAMS=( init )
#
# Note, it is almost always better to assign preparatory Ant tasks to the
# ${ANT_SRC_CONFIGURE_PARAMS} array rather than to this array. The reasons are
# subtle but discussed in full in comments for the "antefix_src_prepare"
# function. The only tasks that should be assigned to this array are those
# doing genuine file patching. See "eclipse.exlib" for a valid example. As most
# "build.xml" files do no such patching, most exheres should leave this array
# empty. You have been warned, Exherbon! *tsk* *tsk*
ANT_SRC_PREPARE_PARAMS=( )

# Ant tasks to be run against ${ANT_BUILD_XML} during the "src_configure" phase.
# This is empty by default, implying no Ant tasks will be run for configuration.
# Example:
#     ANT_SRC_CONFIGURE_PARAMS=( init )
ANT_SRC_CONFIGURE_PARAMS=( )

# Ant tasks to be run against ${ANT_BUILD_XML} during the "src_compile" phase.
# This is empty by default, implying no Ant tasks will be run for compilation.
# Example:
#     ANT_SRC_COMPILE_PARAMS=( compile )
ANT_SRC_COMPILE_PARAMS=( )

# Ant tasks to be run against ${ANT_BUILD_XML} during the "src_test" phase.
# This is empty by default, implying no Ant tasks will be run for testing.
# Example:
#     ANT_SRC_TEST_PARAMS=( test )
ANT_SRC_TEST_PARAMS=( )

# Ant tasks to be run against ${ANT_BUILD_XML} during the "src_install" phase.
# This is empty by default, implying no Ant tasks will be run for installation.
# Example:
#     ANT_SRC_INSTALL_PARAMS=( jar )
ANT_SRC_INSTALL_PARAMS=( )

# ....................{ DEPRECATED SETTINGS                }....................
# Synonym to the ${ANT_SRC_CONFIGURE_PARAMS} setting. Ant is no longer invoked
# in the "src_prepare" phase (due to reasons discussed there). This setting is
# thus duplicitous and deprecated.
ANT_SRC_PREPARE_PARAMS=( )

# Array of absolute paths or relative paths under ${WORK} to be recursively
# deleted in the "src_unpack" phase. The "javafix" exlib now provides a similar,
# but safer, pair of settings for recursively deleting source tarball-bundled
# class and jar files. This setting is somewhat more dangerous and deprecated.
ANT_BUNDLED_LIBSDIR=( )

# ....................{ CONSTANTS                          }....................
if [[ -z "${ANT_HOME}" ]]; then
    ewarn "\$ANT_HOME is not set; it defaults to \"/usr/share/ant\"."
    ANT_HOME="/usr/share/ant"
fi

# Absolute path to the "ant" binary. ${ANT_HOME} is an environment variable set
# by "/etc/env.d/*ant", itself installed by the Ant exheres. It usually points
# to "/usr/share/ant/".
ANT="${ANT_HOME}/bin/ant"

# ....................{ EXHERES                            }....................
local ant_version_specifier=
[[ -n "$(exparam ant_version_required)" ]] &&
    ant_version_specifier="[>=$(exparam ant_version_required)]"

DEPENDENCIES="
    build:
        dev-java/apache-ant${ant_version_specifier}
"

# ....................{ PHASES                             }....................
antefix_pkg_setup() {
    javafix_pkg_setup

    #FIXME: Kill these globals from all Java exheres...then kill this.
    [[ -n "${ANT_SRC_PREPARE_PARAMS}" ]] &&
        ewarn "${PN} sets the depcrecated \$ANT_SRC_PREPARE_PARAMS global."
    [[ -n "${ANT_BUNDLED_LIBSDIR}" ]] &&
        ewarn "${PN} sets the depcrecated \$ANT_BUNDLED_LIBSDIR global."
}

antefix_src_unpack() {
    javafix_src_unpack
    exparam -b create_build_xml && antefix_create_build_xml

    #FIXME: Excise.
    # Kill evil bundled jar files!
    #
    # This is a deprecated code block, and now (more or less) considered bad.
    # The "java_src_unpack" cleans all embedded jar files if and only if the
    # "javafix_clean_jar_files" exparam is true.
    if [[ -n "${ANT_BUNDLED_LIBSDIR[@]}" ]]; then
        for ANT_BUNDLED_LIBS in "${ANT_BUNDLED_LIBSDIR[@]}"; do
            if [[ -d "${WORK}/${ANT_BUNDLED_LIBS}" ]]; then
                edo rm -rf "${WORK}/${ANT_BUNDLED_LIBS}"/*
            fi
        done
    fi

    # Never invoke Ant unless you have a task with which to invoke it, since
    # "build.xml" files often supply a default task performing all relevant
    # tasks when passed no explicit task. (This is rarely what we want.)
    if [[ -n "${ANT_SRC_UNPACK_PARAMS[@]}" ]]; then
        # All "build.xml" files reside under ${WORK}. Temporarily pushd there.
        pushd "${WORK}"
        exant "${ANT_BUILD_XML}" \
              "${ANT_PARAMS[@]}" "${ANT_SRC_UNPACK_PARAMS[@]}"
        popd
    fi
}

# Avoid invoking Ant here! The reasons are subtle. The calling exheres must
# have the opportunity to patch files in its "src_prepare" function prior
# to invoking Ant. Hypothetically, if this function invoked Ant, that
# exheres would need to delay calling this function until after it had
# already patched files: e.g., something like
#
#     # This is subtly bad.
#     ANT_SRC_PREPARE_PARAMS=( static )
#     exheres_src_prepare() {
#         edo sed -e 's~bad~good~' -i "${ANT_BUILD_XML}"
#         antefix_src_prepare
#     }
#
# But the "antefix_src_prepare" function calls the "javafix_src_prepare"
# function that calls "expatch" to patch files. But "expatch" should be
# called //before// performing any such sedding, as "expatch" tends to
# overwrite file changes with patched content. So we can't reliably do the
# above. Instead, we need to partition file patching and Ant invocation
# into two phases. Do this by pushing Ant invocation into the next stage,
# "src_configure", even though Ant tasks run by this invocation are
# probably not analogous to "econfigure". Thus, the above example becomes:
#
#     # This is better!
#     ANT_SRC_CONFIGURE_PARAMS=( static )
#     exheres_src_prepare() {
#         antefix_src_prepare
#         edo sed -e 's~bad~good~' -i "${ANT_BUILD_XML}"
#     }
antefix_src_prepare() {
    javafix_src_prepare

    if [[ -n "${ANT_SRC_PREPARE_PARAMS[@]}" ]]; then
        exant "${ANT_BUILD_XML}" \
              "${ANT_PARAMS[@]}" "${ANT_SRC_PREPARE_PARAMS[@]}"
    fi
}

antefix_src_configure() {
    javafix_src_configure

    if [[ -n "${ANT_SRC_CONFIGURE_PARAMS[@]}" ]]; then
        exant "${ANT_BUILD_XML}" \
              "${ANT_PARAMS[@]}" "${ANT_SRC_CONFIGURE_PARAMS[@]}"
    fi
}

antefix_src_compile() {
    javafix_src_compile

    if [[ -n "${ANT_SRC_COMPILE_PARAMS[@]}" ]]; then
        exant "${ANT_BUILD_XML}" \
              "${ANT_PARAMS[@]}" "${ANT_SRC_COMPILE_PARAMS[@]}"
    fi
}

antefix_src_test() {
    javafix_src_test

    if [[ -n "${ANT_SRC_TEST_PARAMS[@]}" ]]; then
        exant "${ANT_BUILD_XML}" \
              "${ANT_PARAMS[@]}" "${ANT_SRC_TEST_PARAMS[@]}"
    fi
}

antefix_src_install() {
    # Invoke Ant. This generates jar files prior to calling the parent
    # "src_install" function that actually installs these files.
    if [[ -n "${ANT_SRC_INSTALL_PARAMS[@]}" ]]; then
        exant "${ANT_BUILD_XML}" \
              "${ANT_PARAMS[@]}" "${ANT_SRC_INSTALL_PARAMS[@]}"
    fi

    javafix_src_install
}

# ....................{ EXANT                              }....................
# void exant(char *build_xml_filename, char *param1, char *param2, ...)
#
# Call "ant" with the passed absolute or relative path to a "build.xml" file and
# zero or more command-line parameters to be passed to this "build.xml" file.
# These parameters must be either: {a} Ant properties of the form "-Dkey=value"
# (e.g., "-Djavacc.home=lib/javacc.jar") or {b} Ant tasks of the form "task"
# (e.g., "compile").
#
# This function supplants the earlier "_ant_run" function and, unlike that
# function, may be explicitly called by exheres operating on multiple
# "build.xml" files. (Exheres not operating on multiple "build.xml" files should
# avoid calling this function explicitly.)
exant() {
    illegal_in_global_scope
    [[ ${#} -ge 1 ]] || die_unless_nonfatal "at least one argument needed"

    local eant_build_xml="${1}"
    shift

    # Always enable the "noget" property when invoking Ant. This instructs Ant
    # to ignore any "get" tasks defined by this "build.xml" file; such tasks,
    # if defined, attempt to remotely download external jar files.
    edo "${ANT}" -file "${eant_build_xml}" -Dnoget=true "${@}"
}

# ....................{ BUILD.XML                          }....................
# void antefix_enable_build_xml_creation(void)
#
# Enable "build.xml" creation. This must only be called in global exheres scope;
# it provides exheres globals, Ant tasks, et al.
antefix_enable_build_xml_creation() {
    # ..................{ SETTINGS                           }..................
    # Exheres setting the "create_build_xml" boolean should also consider one or
    # several of the following settings, as required by the directory structure
    # their archives unpack to.

    # Absolute or relative path under "${WORK}" having Java sources files for
    # this exheres. The created "build.xml" file reads Java sources files from
    # this path during compilation.
    #
    # Defaults to "src".
    ANT_SRC_COMPILE_SOURCE_DIR="src"

    # Absolute or relative path to some custom "MANIFEST.MF" file to be
    # installed into the output jar file.
    #
    # Defaults to none. This implies a default "MANIFEST.MF" file will be
    # installed into the output jar file, which is fine for most exheres.
    ANT_SRC_INSTALL_MANIFEST_MF=""

    # Absolute or relative path under "${WORK}" having Java sources files for
    # this exheres NOT residing under a top-level "src/" directory. Most source
    # tarballs extract Java sources into the current directory (e.g., "${WORK}")
    # or into a top-level directory having as its subdirectory the top-level
    # namespace directory for this exheres (e.g., "${WORK}/src/com"). Some
    # tarballs extract Java sources into a top-level namespace directory,
    # however (e.g., "${WORK}/com"); those that do must set this variable to
    # ensure that that directory is moved under a top-level "src/" directory.
    #
    # Defaults to none. MOST EXHERES CAN SAFELY IGNORE THIS VARIABLE.
    #
    # For example, the JZlib project claims the "com.jcraft.jzlib" namespace and
    # distributes a tarball extracting into the "com/jcraft/jzlib/" directory.
    # To pacify Ant, the root of this directory (e.g., "com/") must be moved
    # directly under the root of another directory (e.g., "src/"), such that the
    # resulting directory structure is coverted from this:
    #
    # ${WORK}/
    #   com/
    #     jcraft/
    #       jzlib/
    #
    # to this:
    #
    # ${WORK}/
    #   src/
    #     com/
    #       jcraft/
    #         jzlib/
    # 
    # To automate this, the JZlib exheres sets:
    #
    #     ANT_SRC_COMPILE_SOURCE_NAMESPACE_DIR="com"
    #
    # When set, this exlib automatically moves that directory into
    # "${ANT_SRC_COMPILE_SOURCE_DIR}" as required by the skeleton "build.xml".
    ANT_SRC_COMPILE_SOURCE_NAMESPACE_DIR=""

    # ..................{ CONSTANTS                          }..................
    # Exheres setting the "create_build_xml" boolean should AVOID changing the  
    # following constants.

    # Exheres options guaranteed to be supported by the created "build.xml".
    MYOPTIONS+="debug doc"

    # Ant tasks guaranteed to be supported by the created "build.xml".
    # 
    # Note: the "javadoc" task will be conditionally appended to this array,
    # later, if and only if the caller has enabled the exheres "doc" option.
    ANT_SRC_CONFIGURE_PARAMS=( )
    ANT_SRC_COMPILE_PARAMS=( compile )
    ANT_SRC_INSTALL_PARAMS=( jar )

    # Absolute or relative path under "${WORK}" to which the output jar file
    # (NOTE: singular "jar file") will be created. Avoid changing this. If you
    # need to, you're probably better off writing your own "build.xml".
    ANT_SRC_INSTALL_JARS_DIR="dist"

    JAVA_SRC_LIBRARY_DIR="lib"
    JAVA_SRC_INSTALL_JARS=( "dist/${PN}.jar" )
}

# Call the above function for exheres passing the "create_build_xml" exparam.
# Note that this function may also be called explicitly in exheres if needed.
exparam -b create_build_xml && antefix_enable_build_xml_creation

# void antefix_create_build_xml(char *filename)
#
# Create a new "build.xml" file appropriate for building this exheres. See
# antefix_create_build_xml_file() for details.
antefix_create_build_xml() {
    illegal_in_global_scope
    [[ ${#} -eq 0 ]] || die_unless_nonfatal "no arguments needed"

    # Localize all operations to the "${WORK}" directory.
    edo pushd "${WORK}"

    # If this exheres is *NOT* handling its own unpacking, then its archives
    # have already been unpacked we may safely fiddle with unpacked contents.
    if [[ -n "${JAVA_IS_UNPACKING_ARCHIVES}" ]]; then
        # If the source tarball unpacks into the current directory, then all
        # files and paths are assumed to be Java sources. In this case, move
        # files and paths under this destination sources directory.
        if [[ "${WORK}" == ${WORKBASE} ]]; then
            local temp_source_dir="${TEMP}/src"
            edo mkdir -p "${temp_source_dir}"
            edo mv "${WORK}"/* "${temp_source_dir}"/
            edo mv "${temp_source_dir}" "${ANT_SRC_COMPILE_SOURCE_DIR}"
        # Otherwise, if the destination sources directory does not exist, die.
        elif [[ ! -d "${ANT_SRC_COMPILE_SOURCE_DIR}" ]]; then
            if [[ -n "${ANT_SRC_COMPILE_SOURCE_NAMESPACE_DIR}" ]]; then
                [[ -d "${ANT_SRC_COMPILE_SOURCE_NAMESPACE_DIR}" ]] || die_unless_nonfatal \
                    "Java sources namespace directory \"${ANT_SRC_COMPILE_SOURCE_NAMESPACE_DIR}\" not found"
                edo mkdir -p "${ANT_SRC_COMPILE_SOURCE_DIR}"
                edo mv "${ANT_SRC_COMPILE_SOURCE_NAMESPACE_DIR}" \
                       "${ANT_SRC_COMPILE_SOURCE_DIR}"/
            else
                die_unless_nonfatal "Java sources directory \"${ANT_SRC_COMPILE_SOURCE_DIR}\" not found"
            fi
        fi
    fi

    antefix_create_build_xml_file "${ANT_BUILD_XML}"

    # Also ensure we generate javadoc if that option is enabled. Do this here
    # rather than in the "antefix_enable_build_xml_creation" function as we call that
    # function in global scope, at which point we have cannot check options.
    if option doc; then
        JAVA_SRC_INSTALL_JAVADOC_DIR="javadoc"
        JAVA_SRC_INSTALL_PARAMS+=( javadoc )
    fi

    # Pop goes the Edo jidai.
    edo popd
}

# void antefix_create_build_xml(char *filename)
#
# Create a new "build.xml" file at the passed absolute or relative path
# appropriate for building this exheres. This is only appropriate for those
# exheres not already providing a "build.xml" file. By convention, this file
# defines the following top-level Ant tasks:
#
# * "compile", compiling class files for this exheres from "src/" to "build/".
# * "jar", jaring this exheres into "dist/".
# * "javadoc", generating HTML files for this exheres in "javadoc/".
#
# These tasks accept the following Ant properties at the command-line:
#
# * "src", an absolute or relative path to the root of the source directory.
#   Defaults to "${WORK}/src/". (You will probably have to either manually move
#   the source directory for this exheres to this default or redefine this
#   property. Either are fine.)
# * "lib", an absolute or relative path to the root of the input jar file
#   directory (i.e., the directory having symlinks to external dependencies).
#   Defaults to "${WORK}/lib/". (This exlib ensures that these dependencies will
#   be symlinked into this directory, when specified via the
#   ${ANT_SRC_LIBRARY_DIR} global.)
# * "build", an absolute or relative path to the root of the classes directory.
#   Defaults to "${WORK}/build/".
# * "dist", an absolute or relative path to the root of the output jar file
#   directory. Defaults to "${WORK}/build/".
# * "javadoc", an absolute or relative path to the root of the output javadoc
#   directory. Defaults to "${WORK}/javadoc/".
# * "debug", a "true" or "false" boolean that, if true, embeds debugging
#   metadata in compiled class files. Defaults to "false".
#
# Thus, exheres need to ensure source files appear in the directory
# corresponding to the "src" property, which defaults to "${WORK}/src/". But
# that's it. This exlib takes care of everything else for you. See
# implementation for details.
#
# This is a utility function only ever called by "antefix_create_build_xml".
antefix_create_build_xml_file() {
    illegal_in_global_scope
    [[ ${#} -eq 1 ]] || die_unless_nonfatal "exactly one argument needed"

    # If this exheres already provides a default "build.xml" file, move it away.
    [[ -f "${ANT_BUILD_XML}" ]] &&
        edo mv "${ANT_BUILD_XML}" "${ANT_BUILD_XML}.orig"

    local build_xml_src_dir="${ANT_SRC_COMPILE_SOURCE_DIR:-src}"
    local build_xml_lib_dir="${ANT_SRC_LIBRARY_DIR:-lib}"
    local build_xml_dist_dir="${ANT_SRC_INSTALL_JARS_DIR:-dist}"
    local build_xml_jar_file="${ANT_SRC_INSTALL_JARS[1]:-${build_xml_dist_dir}/${PN}.jar}"
    local build_xml_javadoc_dir="${ANT_SRC_INSTALL_JAVADOC_DIR:-javadoc}"

    # Exheres calling this function always have a "debug" option.
    local build_xml_is_debugging=$(option debug && echo true || echo false)

    # Install a custom "MANIFEST.MF" if provided by this exheres.
    local build_xml_manifest_mf=""
    if [[ -n "${ANT_SRC_INSTALL_MANIFEST_MF}" ]]; then
          build_xml_manifest_mf="manifest=\"${ANT_SRC_INSTALL_MANIFEST_MF}\""
    fi

    cat <<EOF > "${1}" 
<?xml version="1.0" encoding="utf-8"?>
<project name="${PN}" default="jar" basedir=".">
    <property name="src"     location="${build_xml_src_dir}"/>
    <property name="lib"     location="${build_xml_lib_dir}"/>
    <property name="build"   location="build"/>
    <property name="dist"    location="${build_xml_dist_dir}"/>
    <property name="javadoc" location="${build_xml_javadoc_dir}"/>
    <property name="jar"     value="${build_xml_jar_file}"/>
    <property name="debug"   value="${build_xml_is_debugging}"/>

    <path id="lib.classpath">
        <fileset dir="\${lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="init">
        <tstamp/>
        <mkdir dir="\${lib}"/>
        <mkdir dir="\${build}"/>
        <mkdir dir="\${dist}"/>
        <mkdir dir="\${javadoc}"/>
    </target>

    <target name="compile" depends="init">
        <javac srcdir="\${src}" destdir="\${build}" debug="\${debug}"
               classpathref="lib.classpath"/>
    </target>

    <target name="jar" depends="compile">
        <jar jarfile="\${jar}" basedir="\${build}" ${build_xml_manifest_mf}/>
    </target>

    <target name="javadoc" depends="init">
        <javadoc sourcepath="\${src}" destdir="\${javadoc}"
                 classpathref="lib.classpath">
            <packageset dir="\${src}"/>
        </javadoc>
    </target>
</project>
EOF
}

